options
{
    linear = True;
};

block SYSTEM_EQUATIONS
{
	identities
	{
		#1. Labor supply
		W[] = sigma * C[] + phi * L[];
		
		#2. Euler Equation
		sigma / beta * (E[][C[1]] - C[]) = R_ss * E[][R[1]];
		
		#3. Law of motion of capital
		K[] = (1 - delta) * K[-1] + delta * I[];
		
		#4. Production Function
		Y[] = A[] + alpha * K[-1] + (1 - alpha) * L[];
		
		#5. Demand for capital
		R[] = Y[] - K[-1];
		
		#6. Demand for labor
		W[] = Y[] - L[];
		
		#7. Equlibrium Condition
		Y_ss * Y[] = C_ss * C[] + I_ss * I[];
		
		#8. Productivity Shock
		A[] = rho_A * A[-1] + epsilon_A[];
		
	};
	
	shocks
	{
		epsilon_A[] ~ Normal(loc=0, scale=sigma_A);
	};
	
	calibration
	{
		sigma   ~ Gamma(a=2, scale=0.25, loc=1) = 2;
		phi     ~ Gamma(a=2, scale=0.25, loc=1) = 1.5;
		alpha   ~ Beta(a=5, b=9) = 0.35;
		beta    ~ Beta(a=10, b=0.15) = 0.985;
		delta   ~ Beta(a=1, b=39) = 0.025;
		rho_A   ~ Beta(a=1, b=0.05) = 0.95;
		sigma_A ~ Gamma(a=2, scale=0.005) = 0.01;
		
		#P_ss = 1;
		R_ss = (1 / beta - (1 - delta));
		W_ss = (1 - alpha) ^ (1 / (1 - alpha)) * (alpha / R_ss) ^ (alpha / (1 - alpha));
		Y_ss = (R_ss / (R_ss - delta * alpha)) ^ (sigma / (sigma + phi)) *
			   ((1 - alpha) ^ (-phi) * (W_ss) ^ (1 + phi)) ^ (1 / (sigma + phi));
		K_ss = alpha * Y_ss / R_ss;
		I_ss = delta * K_ss;
		C_ss = Y_ss - I_ss;
		L_ss = (1 - alpha) * Y_ss / W_ss;	
	};

};