[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"


[project]
name = "gEconpy"
dynamic = ['version']
requires-python = ">=3.11"
authors = [{name="Jesse Grabowski", email='jessegrabowski@gmail.com'}]
description = "A package for solving, estimating, and analyzing DSGE models"
readme = 'README.md'
license = { file = 'LICENSE'}
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Science/Research",
  "Programming Language :: Python",
  "Topic :: Scientific/Engineering",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX",
  "Operating System :: Unix",
  "Operating System :: MacOS",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]

keywords = [
    "dynamic stochastic general equlibrium",
    "economics",
    "macroeconomics",
    "numerical",
    "simulation",
    "autodiff",
    "bayesian statistics"
]


dependencies = [
    "matplotlib",
    "numba",
    "numpy",
    "pandas",
    "pymc>=5.25.0",
    "pymc_extras>=0.4.0",
    "preliz>=0.2.0",
    "pyparsing",
    "pytensor",
    "scipy",
    "setuptools",
    "sympy>=1.14.0",
    "sympytensor",
    "ipython",
    "xarray",
  ]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "pytest",
    "pytest-cov",
    "versioneer",
    "numdifftools"
]

docs = [
  "ipython",
  "jupyter-sphinx",
  "myst-nb",
  "numpydoc",
  "pre-commit",
  "sphinx>=5",
  "sphinx-copybutton",
  "sphinx-design",
  "sphinx-notfound-page",
  "sphinx-sitemap",
  "sphinx-codeautolink",
  "sphinxcontrib-bibtex",
  "pydata-sphinx-theme",
  "watermark",
]

[tool.hatch.version]
source = 'vcs'

[tool.hatch.build.hooks.vcs]
version-file = "gEconpy/_version.py"

[tool.hatch.build.targets.sdist]
exclude = [
  '/.github',
]

[tool.hatch.build.targets.wheel]
packages = ["gEconpy"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.pytest.ini_options]
minversion = "6.0"
xfail_strict=true
log_cli=true
log_cli_level="INFO"
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::RuntimeWarning"]

markers = [
    "include_nk: mark tests using the full new keyenesian model (which can be quite slow)",
]

[tool.ruff]
line-length = 120
target-version = "py312"
allowed-confusables = ["Ã—"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
  "E", "F", "W",      # pycodestyle / pyflakes
  "B",                # flake8-bugbear
  "UP",               # pyupgrade
  "I",                # isort
  "C4",               # flake8-comprehensions
  "SIM",              # flake8-simplify
  "ARG",              # flake8-unused-arguments
  "PTH",              # flake8-use-pathlib
  "TID",              # flake8-tidy-imports
  "DTZ",              # flake8-datetimez
  "RET",              # flake8-return
  "PERF",             # perflint
  "TRY",              # try/except best practices
  "PL",               # pylint-inspired rules
  "NPY",              # numpy-specific rules
  "RUF",              # Ruff-specific
  "D",                # pydocstyle
  "C90",              # mccabe complexity
]
ignore = [
  "RUF001", # Allow Greek letters in strings
  "RUF002", # Allow Greek letters in docstrings
  "RUF012", # Mutable class attributes without ClassVar
  # Allow missing docstrings; enforce style where present
  "D100", "D101", "D102", "D103", "D104", "D105", "D107",
  # Recommended when using Ruff's formatter
  "W191", "E111", "E114", "E117",
  "D206", "D300",
  "Q000", "Q001", "Q002", "Q003",
  "COM812", "COM819",
  "ISC001", "ISC002",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
lines-between-types = 1

[tool.ruff.lint.per-file-ignores]
'tests/*.py' = [
  'F401', # Unused import warning for test files -- this check removes imports of fixtures
  'F811',  # Redefine while unused -- this check fails on imported fixtures
  'F841', # Unused variable warning for test files -- common in pymc model declarations
  'D106'  # Missing docstring for public method -- unittest test subclasses don't need docstrings
]
'docs/source/examples/case_study/*.ipynb' = [
    'F821' # Notebooks uses direct assignment to globals, so ruff thinks variables are not declared
]
