[build-system]
requires = ["setuptools", "versioneer[toml]"]
build-backend = "setuptools.build_meta"


[project]
name = "gEconpy"
dynamic = ['version']
requires-python = ">=3.11"
authors = [{name="Jesse Grabowski", email='jessegrabowski@gmail.com'}]
description = "A package for solving, estimating, and analyzing DSGE models"
readme = 'README.md'
license = { file = 'LICENSE.txt'}
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Science/Research",
  "Programming Language :: Python",
  "Topic :: Scientific/Engineering",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX",
  "Operating System :: Unix",
  "Operating System :: MacOS",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]

keywords = [
    "dynamic stochastic general equlibrium",
    "economics",
    "macroeconomics",
    "numerical",
    "simulation",
    "autodiff",
    "bayesian statistics"
]


dependencies = [
    "matplotlib",
    "numba",
    "numpy",
    "pandas",
    "pymc",
    "pymc_extras",
    "preliz",
    "pyparsing",
    "pytensor",
    "scipy",
    "setuptools",
    "sympy<1.13",
    "sympytensor",
    "ipython",
    "xarray",
  ]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "pytest",
    "pytest-cov",
    "versioneer",
    "numdifftools"
]

docs = [
  "ipython",
  "jupyter-sphinx",
  "myst-nb",
  "numpydoc",
  "pre-commit",
  "sphinx>=5",
  "sphinx-copybutton",
  "sphinx-design",
  "sphinx-notfound-page",
  "sphinx-sitemap",
  "sphinx-codeautolink",
  "sphinxcontrib-bibtex",
  "pydata-sphinx-theme",
  "watermark",
]


[tool.versioneer]
VCS = "git"
style = "pep440"
versionfile_source = "gEconpy/_version.py"
versionfile_build = "gEconpy/_version.py"
tag_prefix = 'v'


[tool.pytest.ini_options]
minversion = "6.0"
xfail_strict=true
log_cli=true
log_cli_level="INFO"
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::RuntimeWarning"]


[tool.ruff.lint]
select = ["D", "E", "F", "I", "UP", "W", "RUF"]
ignore = [
  "E501",   # Line length
  "E741",   # Ambiguous variable name
  "RUF001", # String contains ambiguous character (such as Greek letters)
  "RUF002", # Docstring contains ambiguous character (such as Greek letters)
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D107",
  "D200",
  "D202",
  "D203",
  "D204",
  "D205",
  "D209",
  "D212",
  "D213",
  "D301",
  "D400",
  "D401",
  "D403",
  "D413",
  "D415",
  "D417",
]

[tool.ruff.lint.isort]
lines-between-types = 1

[tool.ruff.lint.per-file-ignores]
'tests/*.py' = [
  'F401', # Unused import warning for test files -- this check removes imports of fixtures
  'F811',  # Redefine while unused -- this check fails on imported fixtures
  'F841', # Unused variable warning for test files -- common in pymc model declarations
  'D106'  # Missing docstring for public method -- unittest test subclasses don't need docstrings
]
'docs/source/examples/case_study/*.ipynb' = [
    'F821' # Notebooks uses direct assignment to globals, so ruff thinks variables are not declared
]
