tryreduce
{
    TC[], U[], Y_j[], T[], D[];
};


block STEADY_STATE
{
    identities
    {
        A[ss] = 1;
        interest_shock[ss] = 1;
        pi[ss] = pi_bar;
        pi_w[ss] = pi_bar;

        # epsilon_p[ss] = epsilon_p;
        # epsilon_w[ss] = epsilon_w;

        SDF[ss] = beta;

        i[ss] = pi[ss] / beta - 1;

        P_reset[ss] = ((1 - phi_p * pi[ss] ^ (epsilon_p - 1)) / (1 - phi_p)) ^ (1 / (1 - epsilon_p));

        mc[ss] = (epsilon_p - 1) / epsilon_p  * P_reset[ss] *
            (1 - phi_p * beta * pi[ss] ^ epsilon_p) / (1 - phi_p * beta * pi[ss] ^ (epsilon_p - 1));
        w[ss] = mc[ss] * A[ss];
        w_reset[ss] = w[ss];

        Y[ss] = ((epsilon_p - 1) / epsilon_p * (epsilon_w - 1) / epsilon_w * (1 - psi) ^ (-sigma)) ^ (1 / (sigma + chi));
        N[ss] = Y[ss];
        Y_f[ss] = Y[ss];

        G[ss] = psi * Y[ss];
        C[ss] = (1 - psi) * Y[ss];

        # nu_p[ss] = (1 - phi_p) * P_reset[ss] ^ (-epsilon_p) / (1 - phi_p * pi[ss] ^ epsilon_p);

        lambda[ss] = C[ss] ^ (-sigma);

        X_hat_1[ss] = mc[ss] * Y[ss] / (1 - phi_p * beta * pi[ss] ^ epsilon_p);
        X_hat_2[ss] = Y[ss] / (1 - beta * phi_p * pi[ss] ^ (epsilon_p - 1));

        h_1[ss] = theta * N[ss] ^ (1 + chi) * w[ss] ^ (epsilon_w * (1 + chi)) / (1 - phi_w * beta);
        h_2[ss] = lambda[ss] * w[ss] ^ epsilon_w * N[ss] / (1 - phi_w * beta);
    };
};

block HOUSEHOLD
{

    definitions
    {
        u[] = C[] ^ (1 - sigma) / (1 - sigma) - theta * N[] ^ (1 + chi) / (1 + chi);
    };

    objective
    {
        U[] = u[] + beta * E[][U[1]];
    };

    controls
    {
        C[], B[];
    };

    constraints
    {
        @exclude
        C[] + B[] = w[] * N[] + (1 + i[-1]) * B[-1] / pi[] - T[] + D[]: lambda[];
    };

    identities
    {
        SDF[] = beta * lambda[] / lambda[-1];
    };

    calibration
    {
        beta ~ maxent(Beta(), lower=0.95, upper=0.99) = 0.99;
        sigma ~ maxent(Gamma(), lower=1.1, upper=5.0) = 1.1;
        theta ~ maxent(Gamma(), lower=0.8, upper=3.0) = 1.0;
        chi ~ maxent(Gamma(), lower=0.8, upper=3.0) = 1.0;
    };

};

block LABOR_BUNDLER
{
    identities
    {
        # Reset wage
        w_reset[] ^ (1 + epsilon_w * chi) = epsilon_w / (epsilon_w - 1) * h_1[] / h_2[];
        h_1[] = theta * N[] ^ (1 + chi) * w[] ^ (epsilon_w  * (1 + chi)) + phi_w * beta * E[][pi[1] ^ (epsilon_w * (1 + chi)) * h_1[1]];
        h_2[] = lambda[] * w[] ^ epsilon_w * N[] + phi_w * beta * E[][pi[1] ^ (epsilon_w - 1) * h_2[1]];

        # Aggregate wage index
        w[] ^ (1 - epsilon_w) = (1 - phi_w) * w_reset[] ^ (1 - epsilon_w) + phi_w * pi[] ^ (epsilon_w - 1) * w[-1] ^ (1 - epsilon_w);

        # Wage inflation
        pi_w[] = w[] / w[-1] * pi[];

        # Wage distortion index -- Sims doesn't include this because it's not relevant for the model (only for utility)
        # nu_w[] = (1 - phi_w) * w_reset[] ^ (-epsilon_w) + phi_w * pi[] ^ epsilon_w * nu_w[-1];

        # Time varying wage markup
        # Note the minus sign -- positive shock corresponds to *less* interchangeable labor varieties (that is, more .
        # market power for households). Consider that the markup is 1 when epsilon_w -> oo
        # log(epsilon_w[]) = (1 - rho_markup_w) * log(epsilon_w) + rho_markup_w * log(epsilon_w[-1]) - epsilon_markup_w[];
    };

    # shocks
    # {
    #     epsilon_markup_w[];
    # };

    calibration
    {
        phi_w ~ maxent(Beta(), lower=0.6, upper=0.9) = 3/4;
        epsilon_w ~ maxent(Gamma(), lower=2, upper=15, mass=0.99) = 11;
    #    rho_markup_w ~ maxent(Beta(), lower=0.8, upper=0.99) = 0.9;
    };
};

block INTERMEDIATE_FIRM
{
    objective
    {
        TC[] = -(w[] * N[]);
    };

    controls
    {
        N[];
    };

    constraints
    {
        Y_j[] = A[] * N[] : mc[];
    };

    identities
    {
        D[] = Y_j[] + TC[];
        log(A[]) = rho_A * log(A[-1]) + epsilon_A[];
    };

    shocks
    {
        epsilon_A[];
    };

    calibration
    {
        rho_A ~ maxent(Beta(), lower=0.8, upper=0.99) = 0.9;
    };

};

block FINAL_GOODS
{
    identities
    {
        # Reset price
        P_reset[] = epsilon_p / (epsilon_p - 1) * X_hat_1[] / X_hat_2[];
        X_hat_1[] = mc[] * Y[] + phi_p * E[][SDF[1] * pi[1] ^ epsilon_p * X_hat_1[1]];
        X_hat_2[] = Y[] + phi_p * E[][SDF[1] * pi[1] ^ (epsilon_p - 1) * X_hat_2[1]];

        # Price index
        1 = (1 - phi_p) * P_reset[] ^ (1 - epsilon_p) + phi_p * pi[] ^ (epsilon_p - 1);

        # Price distortion index
        # nu_p[] = (1 - phi_p) * P_reset[] ^ (-epsilon_p) + phi_p * pi[] ^ epsilon_p * nu_p[-1];
        nu_p[] = 1;  # Not relevant for 1st order approximation

        # Aggregate production
        Y_j[] = nu_p[] * Y[];

        # Time varying markup
        # log(epsilon_p[]) = (1 - rho_markup_p) * log(epsilon_p) + rho_markup_p * log(epsilon_p[-1]) - epsilon_markup_p[];
    };

    calibration
    {
        phi_p ~ maxent(Beta(), lower=0.6, upper=0.9) = 3/4;
        epsilon_p ~ maxent(Gamma(), lower=2, upper=15) = 11;
        # rho_markup_p ~ maxent(Beta(), lower=0.8, upper=0.99) = 0.9;
    };

   # shocks
   # {
   #     epsilon_markup_p[];
   # };
};

block GOVERNMENT
{
    identities
    {
        # Central Bank
        i[] = (1 - rho_i) * i[ss] +
                rho_i * i[-1] +
                (1 - rho_i) * (
                    phi_pi * (log(pi[]) - log(pi[ss])) +
                    phi_Y * (log(Y[]) - log(Y_f[]))) +
                epsilon_i[];

        # Fiscal authority
        G[] + i[-1] * B[-1] / pi[] = T[] + B[] - B[-1] / pi[];

        # Spending process
        log(G[]) = (1 - rho_G) * log(G[ss]) + rho_G * log(G[-1]) + epsilon_G[];

        B[] = 0;
    };

    shocks
    {
        epsilon_i[], epsilon_G[];
    };

    calibration
    {
        pi_bar = 1.0;
        psi = 0.2;
        rho_i ~ maxent(Beta(), lower=0.7, upper=0.99) = 0.8;
        phi_pi ~ maxent(Gamma(), lower=1.4, upper=2.0) = 1.5;
        phi_Y  ~ maxent(Beta(), lower=0.01, upper=0.6) = 0.5;
        rho_G ~ maxent(Beta(), lower=0.8, upper=0.99) = 0.9;
    };
};

block EQULIBRIUM
{
    identities
    {
        # Total resource constraint
        Y[] = C[] + G[];

        # Counterfactual flexible output
        (epsilon_p - 1) / (epsilon_p) * A[] =
            (epsilon_w / (epsilon_w - 1)) * (Y_f[] - G[]) ^ sigma * (Y_f[] / A[]) ^ chi;
    };
};
